load std;

const SPACE: list = [" ", "ã€€", "\n", "\t", "\r"];
const ERRMSG: text = "the program is not able to parse or evaluate. check out is that correct";
const RESERVED: list =
    ["print", "let", "if", "then", "else", "for", "in", "do", "while", "until", "loop", "begin", "end"];

let evalExpr = fn(e, x ->
    let [scope, ast] = [e, x];
    match (type ast) {
        #Print => {
            for i in ast.value {
                let [scope, val] = evalExpr scope i;
                print valueShow 0 val;
            };
            print "\n";
            [scope, @{ "class": #Literal, "value": null }]
        },
        #Let => {
            let [name, val] = ast.value;
            if (type name == #Call) {
                let [name, args] = name.value;
                let val = @{ "class": #Lambda, "value": [args.value, val] };
                while (type name == #Call) {
                    let [name, args] = name.value;
                    let val = @{ "class": #Lambda, "value": [args.value, val] };
                };
                evalExpr scope @{ "class": #Let, "value": [name, val] }
            } else {
                let [scope, val] = evalExpr scope val;
                if (type name == #Symbol) {
                    scope[name.value] := val;
                    [scope, val]
                } else if (type name == #Array) {
                    if (len name.value != (len val.value)) {
                        fault
                    };
                    for [name, value] in zip(name.value, val.value) {
                        let [scope, _] = evalExpr scope @{ "class": #Let, "value": [name, value] }
                    };
                    [scope, val]
                } else if (type name == #Dict) {
                    for [key, name] in (name.value as list) {
                        let [scope, _] = evalExpr scope
                            @{ "class": #Let, "value": [name, val.value[key]] }
                    };
                    [scope, val]
                } else if (type name == #Operator) {
                    if (name.value[0] == `::`) {
                        let accessor = name.value[1];
                        let [scope, obj] = evalExpr scope accessor;
                        let [scope, key] = evalExpr scope name.value[2];
                        obj.value[key.value] := {
                            if (type obj.value != struct) {
                                if ([text, list] :: [type key.value])
                                    { val.value } else { val }
                            } else {
                                val
                            }
                        };
                        evalExpr scope @{ "class": #Let, "value": [accessor, obj] }
                    } else if (name.value[0] == `as`) {
                        let [scope, annotate] = evalExpr scope name.value[2];
                        let [scope, typeOfVal] = evalExpr scope
                            @{ "class": #Call, "value": [scope["type"], val] };
                        if (typeOfVal == annotate) {
                            evalExpr scope @{ "class": #Let, "value": [name.value[1], val] }
                        }
                        else fault
                    }
                } else {
                    let [scope, name] = evalExpr scope name;
                    if (name != val) { fault };
                    [scope, val]
                }
            }
        },
        #If => {
            if { let [scope, cond] = evalExpr scope ast.value[0] }
                evalExpr scope ast.value[1]
            else if ast.value[2]
                evalExpr scope it
            else
                [scope, @{ "class": #Literal, "value": null }]
        },
        #For => {
            let [counter, iter, body] = ast.value;
            let result = @{ "class": #Literal, "value": null };
            let [scope, iter] = evalExpr scope @{
                "class": #Operator,
                "value": [`as`, iter, @{ "class": #Literal, "value": list } ]
            };
            for item in iter.value {
                let [scope, _] = evalExpr scope @{ "class": #Let, "value": [counter, item] };
                let [scope, result] = evalExpr scope body;
            };
            [scope, result]
        },
        #While => {
            let [expr, body] = ast.value;
            let result = @{ "class": #Literal, "value": null };
            while (evalExpr scope expr) {
                let scope = it[0];
                let [scope, result] = evalExpr scope body;
            };
            [scope, result]
        },
        #Until => {
            let [expr, body] = ast.value;
            let result = @{ "class": #Literal, "value": null };
            while !(evalExpr scope expr) {
                let [scope, result] = evalExpr scope body;
            };
            [scope, result]
        },
        #Block => {
            let result = @{ "class": #Literal, "value": null };
            for i in ast.value {
                [scope, result] := evalExpr(scope, i);
            };
            [scope, result]
        },
        #Symbol =>  evalExpr scope scope[ast.value],
        #Array => {
            let result = [];
            for i in ast.value {
                let [scope, val] = evalExpr scope i;
                result += [val]
            };
            [scope, @{ "class": #Literal, "value": result }]
        },
        #Dict => {
            let result = @{};
            for [key, value] in (ast.value as list) {
                let [scope, val] = evalExpr scope value;
                result[key] := val
            };
            [scope, @{ "class": #Literal, "value": result }]
        },
        #Call => {
            let [func, value] = ast.value;
            let [scope, func] = evalExpr scope func;
            let [scope, value] = evalExpr scope value;
            if (type func == #Lambda) {
                let [[arg, body], funcScope] = [func.value, scope];
                let arg = @{ "class": #Symbol, "value": arg };
                let body = betaReduct(arg, value, body);
                [scope, evalExpr funcScope body :: 1]
            } else if (type func == function) {
                func scope value
            } else {
                fault
            }
        },
        #Operator => {
            let [opr, a, b] = ast.value;
            let [scope, a] = evalExpr scope a;
            let [scope, b] = evalExpr scope b;
            let result = opr a.value b.value;
            [scope, prepare result]
        },
        _ => [scope, ast]
    }
);

let betaReduct = fn(x, y, z ->
    let [from, to, ast] = [x, y, z];
    if (ast == from) to else
    match (type ast) {
        #Let => {
            @{ "class": #Let, "value": [ast.value[0], betaReduct from to ast.value[1]] }
        },
        #Call | #Block | #Print | #If | #For => {
            @{ "class": type ast, "value": map (betaReduct from to) ast.value }
        },
        #Operator => {
            @{ "class": #Operator, "value": [ast.value[0]] + (map (betaReduct from to) ast.value[1 ~ len(ast.value)]) }
        },
        #Lambda => {
            let [args, body] = ast.value;
            @{
                "class": #Lambda,
                "value": [args, {
                    if (args == from)
                        body
                    else
                        (betaReduct from to) body
                }]
            }
        },
        _ => ast
    }
);

let prepare = fn(x ->
    let result = x;
    if (type result == list) {
        let result = map prepare result
    } else if (type result == struct) {
        let newResult = @{};
        for [k, v] in (result as list) {
            newResult[k] := prepare v
        };
        let result = newResult;
    };
    if !([#Literal, #Lambda] :: [type result]) {
        result := @{ "class": #Literal, "value": result }
    };
    result
);

let parseBlock = fn(source ->
    let [token, block] = [trim source, []];
    for line in (tokenize ["."] token) {
        let line = trim line;
        block += [parseStmt line]
    };
    @{ "class": #Block, "value": block }
);

let parseStmt = fn(source ->
    let token = trim source;
    if (token["print"] == (0 ~ 5)) {
        let token = tokenize [","] (token - "print");
        @{ "class": #Print, "value": map parseBlock token }
    } else if (token["let"] == (0 ~ 3)) {
        let token = token - "let" / "=";
        let [name, value] = [trim token[0], join token[1 ~ len(token)] "="];
        @{ "class": #Let, "value": [parseExpr name, parseBlock value] }
    } else if (token["if"] == (0 ~ 2)) {
        let token = tokenize SPACE (token - "if");
        @{
            "class": #If,
            "value": {
                if (token :: ["then"]) {
                    let posThen = it as list :: 0;
                    if (token :: ["else"]) {
                        let posElse = it as list :: 0;
                        [
                            parseBlock (join token[0 ~ posThen] SPACE[0]),
                            parseBlock (join token[posThen + 1 ~ posElse] SPACE[0]),
                            parseBlock (join token[posElse + 1 ~ len(token)] SPACE[0])
                        ]
                    } else [
                        parseBlock (join token[0 ~ posThen] SPACE[0]),
                        parseBlock (join token[posThen + 1 ~ len(token)] SPACE[0])
                    ]
                }
                else fault
            }
        }
     } else if (token["for"] == (0 ~ 3)) {
        let token = tokenize SPACE (token - "for");
        @{
            "class": #For,
            "value": {
                  if (token :: ["in"]) {
                    let posIn = it as list :: 0;
                    if (token :: ["do"]) {
                        let posDo = it as list :: 0;
                        [
                            parseExpr (join token[0 ~ posIn] SPACE[0]),
                            parseExpr (join token[posIn + 1 ~ posDo] SPACE[0]),
                            parseBlock (join token[posDo + 1 ~ len(token)] SPACE[0])
                        ]
                    }
                    else fault
                }
                else fault
            }
        }
     } else if (token["while"] == (0 ~ 5)) {
        let token = tokenize SPACE (token - "while");
        @{
            "class": #While,
            "value": {
                  if (token :: ["loop"]) {
                    let posLoop = it as list :: 0;
                    [
                        parseBlock (join token[0 ~ posLoop] SPACE[0]),
                        parseBlock (join token[posLoop + 1 ~ len(token)] SPACE[0])
                    ]
                }
                else fault
            }
        }
     } else if (token["until"] == (0 ~ 5)) {
        let token = tokenize SPACE (token - "until");
        @{
            "class": #Until,
            "value": {
                  if (token :: ["loop"]) {
                    let posLoop = it as list :: 0;
                    [
                        parseBlock (join token[0 ~ posLoop] SPACE[0]),
                        parseBlock (join token[posLoop + 1 ~ len(token)] SPACE[0])
                    ]
                }
                else fault
            }
        }
    } else {
        parseExpr token
    }
);

let parseExpr = fn(source ->
    let tokenList = tokenize SPACE source;
    let token = tokenList[len tokenList  - 1] |> trim;
    let token = {
        // Number 64-bit float;
        if (token as number) {
            @{ "class": #Literal, "value": it };

        // Type signature
        } else if (parseSig token) {
            @{ "class": #Literal, "value": it };

        // String that sequence of UTF-8 character
        } else if ((token[0] == "\"") & (token[len token - 1] == "\"")) {
            @{
                "class": #Literal,
                "value": { if token[1 ~ (len token - 1)] it else "" }
            };

        // Expression that override other operator
        } else if (token[0] == "(" & (token[len token - 1] == ")")) {
            token[1 ~ (len token - 1)] |> trim |> parseExpr;

        // Code block that includes plural statement
        } else if (token[0 ~ 5] == "begin" & (token[len token - 3 ~ (len token)] == "end")) {
            { if token[5 ~ (len token - 3)] it else "" } |> trim |> parseBlock;

        // List that can handle many different typed value
        } else if (token[0] == "[" & (token[len token - 1] == "]")) {
            @{
                "class": #Array,
                "value": {
                    if (tokenize [","] token[1 ~ (len token - 1)]) {
                        let result = [];
                        for i in it {
                            let trimmed = trim i;
                            if ("" != trimmed) {
                                result += [parseExpr it]
                            }
                        };
                        result
                    } else []
                }
            };

        // Dictionary that can handle several values by key
        } else if (token[0] == "{" & (token[len token - 1] == "}")) {
            @{
                "class": #Dict,
                "value": {
                    if (tokenize [","] token[1 ~ (len token - 1)]) {
                        let result = @{};
                        for i in it {
                            let trimmed = trim i;
                            if ("" != trimmed) {
                                if { let [key, value] = tokenize [":"] trimmed } {
                                    result[trim key] := parseExpr(value);
                                } else {
                                    result[trimmed] := parseExpr(trimmed);
                                }
                            }
                        };
                        result
                    } else []
                }
            };

        // Access list value by index specification
        } else if (token["["] & (token[len token - 1] == "]")) {
            let token = token[0 ~ (len token - 1)] / "[";
            let [token, accessor] = [join token[0 ~ (len token - 1)] "[", token[len token - 1]];
            @{ "class": #Operator, "value": [`::`, parseExpr token, parseExpr accessor] };

        // Symbol that used in variable reference
        } else if !(RESERVED :: [token]) {
           @{ "class": #Symbol, "value": token }
        }
        else fault
    };
    if (len tokenList >= 2 & tokenList[len tokenList - 2]) {
        let hasLhs = Î»x.parseExpr(join tokenList[0 ~ (len tokenList - x)] " ");
        let operatorGen = Î»x.@{ "class": #Operator, "value": [x, hasLhs 2, token] };
        let assignGen = Î»x.@{ "class": #Let, "value": [hasLhs 2, x] };
        let revClacAssignGen = Î»x.@{
            "class": #Let,
            "value": [token, @{
                "class": #Operator,
                "value": [x, token, hasLhs 2]
            }]
        };

        match (trim it) {
            "+"   => operatorGen `+`,
            "-"   => operatorGen `-`,
            "*"   => operatorGen `*`,
            "/"   => operatorGen `/`,
            "%"   => operatorGen `%`,
            "^"   => operatorGen `^`,
            "=="  => operatorGen `==`,
            "!="  => operatorGen `!=`,
            ">"   => operatorGen `>`,
            "<"   => operatorGen `<`,
            ">="  => operatorGen `>=`,
            "<="  => operatorGen `<=`,
            "as"  => operatorGen `as`,
            "~"   => operatorGen `~`,
            "\'s" => operatorGen `::`,
            ":="  => assignGen token,
            "+="  => operatorGen `+` |> assignGen,
            "-="  => operatorGen `-` |> assignGen,
            "*="  => operatorGen `*` |> assignGen,
            "/="  => operatorGen `/` |> assignGen,
            "%="  => operatorGen `%` |> assignGen,
            "^="  => operatorGen `^` |> assignGen,
            "=:"  => @{ "class": #Let, "value": [token, hasLhs 2] },
            "=+"  => revClacAssignGen `+`,
            "=-"  => revClacAssignGen `-`,
            "=*"  => revClacAssignGen `*`,
            "=/"  => revClacAssignGen `/`,
            "=%"  => revClacAssignGen `%`,
            "=^"  => revClacAssignGen `^`,
            "|>"  => @{ "class": #Call,  "value": [token, hasLhs 2] },
            _     => @{ "class": #Call,  "value": [hasLhs 1, token] }
        }
    } else {
        token
    }
);

let parseSig = fn(x ->
    let source = x;
    match source {
        "str" => text,
        "num" => number,
        "arr" => list,
        "fun" => function,
        "sig" => signature,
        "dic" => struct
    }
);

let tokenize = fn(x, y ->
    let [delimiterList, source] = [x, y];
    let [tokens, current] = [[], ""];
    let [nest, quote] = [0] * 2;

    let index = 0;
    while (len source > index) {
        let char = source[index];
        let sliceTo = \x.source[index ~ (x + index)];
        if (sliceTo 5 == "begin") {
            if (quote == 0) {
                current += "begin";
                nest += 1;
            };
            index += 5;
        } else if (sliceTo 3 == "end") {
            if (quote == 0) {
                current += "end";
                nest -= 1;
            };
            index += 3;
        } else if  (char == "\"") {
            let quote = { if (quote == 1) 0 else 1 };
            current += char;
            index += 1;
        } else if (["(", "[", "{"] :: [char]) {
            if (quote == 0) {
                current += char;
                nest += 1;
            };
            index += 1;
        } else if ([")", "]", "}"] :: [char]) {
            if (quote == 0) {
                current += char;
                nest -= 1;
            };
            index += 1;
        } else if (delimiterList :: [char]) {
            if ((nest == 0) & (quote == 0)) {
                if (current != "") {
                    tokens += [current];
                    let current = "";
                }
            } else {
                current += char;
            };
            index += 1;
        } else {
           current += char;
           index += 1;
        }
    };

    if (current != "") {
        let tokens = tokens + [current];
    };

    tokens
);

let valueShow = fn(isForDebug, x ->
    match type(x) {
        #Literal => {
            let val = x.value;
            match (type val) {
                list => {
                    let inner = join (map (valueShow isForDebug) val) ", ";
                    f"[{inner}]"
                },
                text => {
                    if (isForDebug == 1) f"\"{val}\""
                    else val
                },
                signature => {
                    match val {
                        text => "str",
                        number => "num",
                        list => "arr",
                        function => "fun",
                        signature => "sig",
                        struct => "dic"
                    }
                },
                struct => {
                    let inner = map \x.{
                        f"{x[0]}: {valueShow isForDebug x[1]}"
                    } (val as list);
                    let inner = join inner ", ";
                    f"\{ {inner} \}"
                },
                symbol => "",
                _ => val
            }
        },
        _ => ""
    }
);

let scope = @{
    "input": fn(e, x ->
        let [scope, arg] = [e, x];
        [scope, @{ "class": #Literal, "value":  input arg.value }]
    ),
    "type": fn(e, x ->
        let [scope, arg] = [e, x];
        [scope, @{ "class": #Literal, "value": {
            match (type arg) {
                #Literal => type arg.value,
                #Lambda => function,
                _ => type arg
            }
        }}]
    ),
    "load": fn(e, x ->
        let [scope, arg] = [e, x];
        let code = readFile arg.value;
        evalExpr scope (parseBlock code)
    ),
    "_": @{ "class": #Literal, "value": null },
    "ok": @{ "class": #Literal, "value": 1 },
    "fault": fn(e, x ->
        let [scope, arg] = [e, x];
        fault arg.value
    )
};

if cmdLineArgs[0] {
    if evalExpr(scope, parseBlock (readFile it)) it else {
        print f"Fault: {ERRMSG}\n"
    }
} else {
    print "Rumya 0.1.0\n";
    let line =  1;
    while 1 {
        let prompt = just "right" line 3 "0";
        let code = input f"[{prompt}]> ";
        if evalExpr(scope, parseBlock code) {
            let [scope, result] = it;
            if ("" != (valueShow 1 result)) {
                print f"=> {it}\n"
            }
        } else {
            print f"Fault: {ERRMSG}\n"
        };
        line += 1
    }
}
